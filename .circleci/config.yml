version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.4
    
    working_directory: ~/repo
    
    steps:
      - checkout

      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "requirements.txt" }}
          - v3-dependencies-
      
      - run:
          name: local-gen
          command: |
            sudo locale-gen en_US.UTF-8 || true
            export LANG=en_US.UTF-8
      
      - run:
          name: submodules
          command: |
            git submodule update --init
            
      - run:
          name: install apt-transport-https
          command: |
            sudo apt-get update
            sudo apt-get install apt-transport-https

      - run:
          name: install C++ dependencies
          command: |
            sudo apt-get update
            sudo apt-get install libunwind8 curl
            # Debian 8 https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x#ubuntu
            sudo apt-get install libunwind8 liblttng-ust0 libcurl3 libuuid1 libkrb5-3 zlib1g
            sudo apt-get install libssl1.0.0

      - run:
          name: install cmake
          command: |
            sudo apt-get install cmake
            cmake --version

      - run:
          name: install mono
          command: |
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
            echo "deb https://download.mono-project.com/repo/debian stable-jessie main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
            sudo apt-get update
            sudo apt-get install mono-devel ca-certificates-mono

      - run:
          name: install dotnet
          command: |
            curl -sSL "https://packages.microsoft.com/keys/microsoft.asc" | sudo -E apt-key add -
            echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-trusty-prod trusty main" | sudo tee -a /etc/apt/sources.list > /dev/null
            sudo apt-get update
            sudo -E apt-get -yq update &>> ~/apt-get-update.log
            sudo -E apt-get -yqf --no-install-suggests --no-install-recommends --force-yes install dotnet-sdk-2.1.200

      - run:
          name: Install pandoc
          command: |
                    sudo apt-get update 
                    wget https://github.com/jgm/pandoc/releases/download/2.1.3/pandoc-2.1.3-1-amd64.deb
                    sudo dpkg -i pandoc-2.1.3-1-amd64.deb
          
      - run:
          name: Install tex
          command: |
                    sudo apt-get install -y texlive
                    sudo apt-get install -y texlive-latex-extra
          
      - run:
          name: Install 7z, unrar
          command: |
                    sudo apt-get install -y p7zip-full
          
      - run:
          name: Install InkScape
          command: |
                    sudo apt-get install -y inkscape
          
      - run:
          name: Install graphviz
          command: |
                    sudo apt-get install -y graphviz
          
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -r requirements.txt            
            python3 -m pip install scipy scikit-learn
            
      - run:
          name: remove clang
          command: |
                    sudo apt-get remove clang

      - run:
          name: install clang 6.0
          command: |
                    # wget http://http.debian.net/debian/pool/main/l/llvm-toolchain-5.0/llvm-toolchain-5.0_5.0.1.orig-clang.tar.bz2
                    # Next file is already a compiled version of clang for Debian 8.
                    wget  http://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-linux-gnu-debian8.tar.xz
                    tar xvf clang+llvm-6.0.0-x86_64-linux-gnu-debian8.tar.xz
                    export PATH=/home/circleci/repo/clang+llvm-6.0.0-x86_64-linux-gnu-debian8/bin:$PATH
                    sudo echo "export PATH=/home/circleci/repo/clang+llvm-6.0.0-x86_64-linux-gnu-debian8/bin:\$PATH" >> ~/.bashrc
                    clang --version

      - run:
          name: install pythonnet
          command: |
            python3 -m venv venv
            . venv/bin/activate
            export PATH=/home/circleci/repo/clang+llvm-6.0.0-x86_64-linux-gnu-debian8/bin:$PATH
            clang --version
            python3 -m pip install -U pip
            python3 -m pip install -U setuptools wheel
            git clone https://github.com/pythonnet/pythonnet.git
            cd pythonnet
            python3 setup.py install --xplat
            cd ..

      - run:
          name: install csharpy
          command: |
            python3 -m venv venv
            . venv/bin/activate
             python3 -m pip install csharpy

      - save_cache:
          paths:
            - ./venv
          key: v3-dependencies-{{ checksum "requirements.txt" }}
        
      - run:
          name: build machinelearning release
          command: |
            . venv/bin/activate
            export PATH=/home/circleci/repo/clang+llvm-6.0.0-x86_64-linux-gnu-debian8/bin:$PATH
            cd cscode/machinelearning
            ls
            bash --help
            bash --verbose build.sh -Release
            cd ../..

      - run:
          name: build machinelearning debug
          command: |
            . venv/bin/activate
            export PATH=/home/circleci/repo/clang+llvm-6.0.0-x86_64-linux-gnu-debian8/bin:$PATH
            cd cscode/machinelearning
            ls
            bash --help
            bash --verbose build.sh -Debug
            cd ../..

      - run:
          name: copy binaries ML release
          command: |
            . venv/bin/activate
            python3 setup.py copybinml release

      - run:
          name: copy binaries ML debug
          command: |
            . venv/bin/activate
            python3 setup.py copybinml debug

      - run:
          name: move machine learning binaries
          command: |
            . venv/bin/activate
            md cscode/machinelearningext/dist
            md cscode/machinelearningext/dist/Debug
            md cscode/machinelearningext/dist/Release
            cp cscode/bin/Debug/*.* cscode/machinelearningext/dist/Debug
            cp cscode/bin/Release/*.* cscode/machinelearningext/dist/Release

      - run:
          name: build machinelearningext release
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            . venv/bin/activate
            cd cscode/machinelearningext
            dotnet build -c Release machinelearningext.sln
            cd ..

      - run:
          name: build machinelearningext debug
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            . venv/bin/activate
            cd cscode/machinelearningext
            dotnet build -c Debug machinelearningext.sln
            cd ..

      - run:
          name: copy binaries MLext release
          command: |
            . venv/bin/activate
            python3 setup.py copybinmlext release

      - run:
          name: copy binaries MLext debug
          command: |
            . venv/bin/activate
            python3 setup.py copybinmlext debug

      - run:
          name: build C# release
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            . venv/bin/activate
            cd cscode
            dotnet build -c Release CSharPyMLExtension_netcore.sln
            cd ..

      - run:
          name: build C# debug
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            . venv/bin/activate
            cd cscode
            dotnet build -c Debug CSharPyMLExtension_netcore.sln
            cd ..

      - run:
          name: run C# tests release
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            . venv/bin/activate
            cd cscode
            dotnet test -c Release TestCSharPyMLExtension
            cd ..

      - run:
          name: run C# tests debug
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            . venv/bin/activate
            cd cscode
            dotnet test -c Debug TestCSharPyMLExtension
            cd ..

      - run:
          name: build extension
          command: |
            . venv/bin/activate
            export DOTNET_CLI_TELEMETRY_OPTOUT=1
            python3 setup.py build_ext --inplace

      - run:
          name: run python tests                  
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            . venv/bin/activate
            export LANG=en_US.UTF-8
            python3 setup.py unittests

      - run:
          name: wheel
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            . venv/bin/activate
            python3 setup.py bdist_wheel
            mkdir -p test-reports/dist
            cp dist/*.whl test-reports/dist

      - run:
          name: documentation
          command: |
            . venv/bin/activate
            python3 setup.py build_sphinx
            
      # - run:
      #     name: copy documentation
      #     command: |
      #       mkdir -p test-reports/doc
      #       cp -r  _doc/sphinxdoc/build/html test-reports/doc
            
      # - store_artifacts:
      #     path: test-reports
      #     destination: test-reports
